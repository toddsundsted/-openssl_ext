crystal_doc_search_index_callback({"repository_name":"openssl_ext","body":"# openssl_ext\n\nRSA C Bindings for Crystal (and other extensions)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  openssl_ext:\n    github: toddsundsted/openssl_ext\n```\n\n## Usage\n\n```crystal\nrequire \"openssl_ext\"\n```\n\nSee `spec/rsa_spec.cr` and `spec/x509_spec.cr` for usage in depth.\nThe bindings closely follows the API for https://ruby-doc.org/stdlib-2.4.0/libdoc/openssl/rdoc/OpenSSL/PKey/RSA.html\n\n**Encoding with a passphrase is not yet supported as OpenSSL fails silently without any errors (in order to fix).**\n\n\n## Contributors\n\n- [cimrie](https://github.com/cimrie) Connor Imrie - creator, maintainer\n","program":{"html_id":"openssl_ext/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"openssl_ext","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"openssl_ext/OpenSSL","path":"OpenSSL.html","kind":"module","full_name":"OpenSSL","name":"OpenSSL","abstract":false,"locations":[{"filename":"src/openssl_ext/bio.cr","line_number":1,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/bio.cr#L1"},{"filename":"src/openssl_ext/pkey.cr","line_number":4,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L4"},{"filename":"src/openssl_ext/rsa.cr","line_number":4,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L4"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"doc":"## OpenSSL Integration\n\n- TLS sockets need a context, potentially with keys (required for servers) and configuration.\n- TLS sockets will wrap the underlying TCP socket, and any further communication must happen through the `OpenSSL::SSL::Socket` only.\n\n## Usage Example\n\nRecommended ciphers can be taken from:\n- [OWASP Wiki](https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Cryptographic_Ciphers)\n- [Cipherli.st](https://cipherli.st/)\n- A full list is available at the [OpenSSL Docs](https://www.openssl.org/docs/man1.1.0/apps/ciphers.html#CIPHER-STRINGS)\n\nDo note that:\n- Crystal does its best to provide sane configuration defaults (see [Mozilla-Intermediate](https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28default.29)).\n- Linked version of OpenSSL need to be checked for supporting specific protocols and ciphers.\n- If any configurations or choices in Crystal regarding SSL settings and security are found to be lacking or need\n  improvement please [open an issue](https://github.com/crystal-lang/crystal/issues/new) and let us know.\n\n### Server side\n\nNOTE: For the below example to work, a key pair should be attained.\n\n```\nrequire \"socket\"\nrequire \"openssl\"\n\ndef server\n  # Bind new TCPSocket to port 5555\n  socket = TCPServer.new(5555)\n\n  context = OpenSSL::SSL::Context::Server.new\n  context.private_key = \"/path/to/private.key\"\n  context.certificate_chain = \"/path/to/public.cert\"\n\n  puts \"Server is up\"\n\n  socket.accept do |client|\n    puts \"Got client\"\n\n    bytes = Bytes.new(20)\n\n    ssl_socket = OpenSSL::SSL::Socket::Server.new(client, context)\n    ssl_socket.read(bytes)\n\n    puts String.new(bytes)\n  end\nend\n```\n\n### Client side\n\n```\nrequire \"socket\"\nrequire \"openssl\"\n\ndef client\n  socket = TCPSocket.new(\"127.0.0.1\", 5555)\n  context = OpenSSL::SSL::Context::Client.new\n\n  ssl_socket = OpenSSL::SSL::Socket::Client.new(socket, context)\n  ssl_socket << \"Testing\"\nend\n```","summary":"<h2><a id=\"open-ssl-integration\" class=\"anchor\" href=\"#open-ssl-integration\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>OpenSSL Integration</h2>","types":[{"html_id":"openssl_ext/OpenSSL/Cipher","path":"OpenSSL/Cipher.html","kind":"class","full_name":"OpenSSL::Cipher","name":"Cipher","abstract":false,"superclass":{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/cipher.cr","line_number":4,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/cipher.cr#L4"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"openssl_ext/OpenSSL","kind":"module","full_name":"OpenSSL","name":"OpenSSL"},"doc":"A class which can be used to encrypt and decrypt data using a specified cipher.\n\n```\nrequire \"random/secure\"\n\nkey = Random::Secure.random_bytes(64) # You can also use OpenSSL::Cipher#random_key to do this same thing\niv = Random::Secure.random_bytes(32)  # You can also use OpenSSL::Cipher#random_iv to do this same thing\n\ndef encrypt(data)\n  cipher = OpenSSL::Cipher.new(\"aes-256-cbc\")\n  cipher.encrypt\n  cipher.key = key\n  cipher.iv = iv\n\n  io = IO::Memory.new\n  io.write(cipher.update(data))\n  io.write(cipher.final)\n  io.rewind\n\n  io.to_slice\nend\n\ndef decrypt(data)\n  cipher = OpenSSL::Cipher.new(\"aes-256-cbc\")\n  cipher.decrypt\n  cipher.key = key\n  cipher.iv = iv\n\n  io = IO::Memory.new\n  io.write(cipher.update(data))\n  io.write(cipher.final)\n  io.rewind\n\n  io.gets_to_end\nend\n```","summary":"<p>A class which can be used to encrypt and decrypt data using a specified cipher.</p>","instance_methods":[{"html_id":"to_unsafe-instance-method","name":"to_unsafe","abstract":false,"location":{"filename":"src/openssl_ext/cipher.cr","line_number":5,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/cipher.cr#L5"},"def":{"name":"to_unsafe","visibility":"Public","body":"cipher"}}]},{"html_id":"openssl_ext/OpenSSL/GETS_BIO","path":"OpenSSL/GETS_BIO.html","kind":"struct","full_name":"OpenSSL::GETS_BIO","name":"GETS_BIO","abstract":false,"superclass":{"html_id":"openssl_ext/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"openssl_ext/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"openssl_ext/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/bio.cr","line_number":1,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/bio.cr#L1"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"GETS_BIO","name":"GETS_BIO","value":"begin\n  crystal_bio = OpenSSL::BIO::CRYSTAL_BIO\n  bgets = LibCrypto::BioMethodGets.new do |bio, buffer, len|\n    io = Box(IO).unbox(BIO.get_data(bio))\n    io.flush\n    position = io.pos\n    line = io.gets(len, false)\n    if line.nil?\n      next 0\n    end\n    io.seek(position)\n    bytes = (io.read(Slice.new(buffer, line.bytesize))).to_i\n    if bytes == 1\n    else\n      bytes = bytes - 1\n    end\n    bytes\n  end\n  {% if (compare_versions(LibCrypto::OPENSSL_VERSION, \"1.1.0\")) >= 0 %}\n      LibCrypto.BIO_meth_set_gets(crystal_bio, bgets)\n    {% else %}\n      crystal_bio.value.bgets = bgets\n    {% end %}\n  crystal_bio\nend"}],"namespace":{"html_id":"openssl_ext/OpenSSL","kind":"module","full_name":"OpenSSL","name":"OpenSSL"},"constructors":[{"html_id":"new(io:IO)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/openssl_ext/bio.cr","line_number":32,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/bio.cr#L32"},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"io:IO-instance-method","name":"io","abstract":false,"location":{"filename":"src/openssl_ext/bio.cr","line_number":43,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/bio.cr#L43"},"def":{"name":"io","visibility":"Public","body":"@io"}},{"html_id":"to_unsafe:Pointer(LibCrypto::Bio)-instance-method","name":"to_unsafe","abstract":false,"location":{"filename":"src/openssl_ext/bio.cr","line_number":45,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/bio.cr#L45"},"def":{"name":"to_unsafe","visibility":"Public","body":"@bio"}}]},{"html_id":"openssl_ext/OpenSSL/PKey","path":"OpenSSL/PKey.html","kind":"class","full_name":"OpenSSL::PKey","name":"PKey","abstract":true,"superclass":{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/pkey.cr","line_number":5,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L5"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"openssl_ext/OpenSSL/RSA","kind":"class","full_name":"OpenSSL::RSA","name":"RSA"}],"namespace":{"html_id":"openssl_ext/OpenSSL","kind":"module","full_name":"OpenSSL","name":"OpenSSL"},"constructors":[{"html_id":"new(pkey:Pointer(LibCrypto::EvpPKey),is_private:Bool)-class-method","name":"new","abstract":false,"args":[{"name":"pkey","external_name":"pkey","restriction":"::Pointer(LibCrypto::EvpPKey)"},{"name":"is_private","external_name":"is_private","restriction":"Bool"}],"args_string":"(pkey : Pointer(LibCrypto::EvpPKey), is_private : Bool)","args_html":"(pkey : Pointer(LibCrypto::EvpPKey), is_private : Bool)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":8,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L8"},"def":{"name":"new","args":[{"name":"pkey","external_name":"pkey","restriction":"::Pointer(LibCrypto::EvpPKey)"},{"name":"is_private","external_name":"is_private","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pkey, is_private)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(encoded:String,passphrase=nil,is_private=true)-class-method","name":"new","abstract":false,"args":[{"name":"encoded","external_name":"encoded","restriction":"String"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""},{"name":"is_private","default_value":"true","external_name":"is_private","restriction":""}],"args_string":"(encoded : String, passphrase = nil, is_private = true)","args_html":"(encoded : String, passphrase = <span class=\"n\">nil</span>, is_private = <span class=\"n\">true</span>)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":16,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L16"},"def":{"name":"new","args":[{"name":"encoded","external_name":"encoded","restriction":"String"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""},{"name":"is_private","default_value":"true","external_name":"is_private","restriction":""}],"visibility":"Public","body":"self.new(IO::Memory.new(encoded), passphrase, is_private)"}},{"html_id":"new(io:IO,passphrase=nil,is_private=true)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""},{"name":"is_private","default_value":"true","external_name":"is_private","restriction":""}],"args_string":"(io : IO, passphrase = nil, is_private = true)","args_html":"(io : IO, passphrase = <span class=\"n\">nil</span>, is_private = <span class=\"n\">true</span>)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":20,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L20"},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""},{"name":"is_private","default_value":"true","external_name":"is_private","restriction":""}],"visibility":"Public","body":"if is_private\n  begin\n    bio = GETS_BIO.new(io)\n    new(LibCrypto.pem_read_bio_private_key(bio, nil, nil, passphrase), is_private)\n  rescue\n    bio = GETS_BIO.new(IO::Memory.new(Base64.decode(io.to_s)))\n    new(LibCrypto.d2i_private_key_bio(bio, nil), is_private)\n  end\nelse\n  bio = GETS_BIO.new(io)\n  new(LibCrypto.pem_read_bio_public_key(bio, nil, nil, passphrase), is_private)\nend"}},{"html_id":"new(size:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int32"}],"args_string":"(size : Int32)","args_html":"(size : Int32)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":35,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L35"},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"Int32"}],"visibility":"Public","body":"exponent = 65537.to_u32\nself.generate(size, exponent)\n"}},{"html_id":"new(is_private)-class-method","name":"new","abstract":false,"args":[{"name":"is_private","external_name":"is_private","restriction":""}],"args_string":"(is_private)","args_html":"(is_private)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":12,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L12"},"def":{"name":"new","args":[{"name":"is_private","external_name":"is_private","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(is_private)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"finalize-instance-method","name":"finalize","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":44,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L44"},"def":{"name":"finalize","visibility":"Public","body":"LibCrypto.evp_pkey_free(self)"}},{"html_id":"private?:Bool-instance-method","name":"private?","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":48,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L48"},"def":{"name":"private?","visibility":"Public","body":"@is_private"}},{"html_id":"public?-instance-method","name":"public?","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":52,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L52"},"def":{"name":"public?","visibility":"Public","body":"!private?"}},{"html_id":"sign(digest,data)-instance-method","name":"sign","abstract":false,"args":[{"name":"digest","external_name":"digest","restriction":""},{"name":"data","external_name":"data","restriction":""}],"args_string":"(digest, data)","args_html":"(digest, data)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":136,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L136"},"def":{"name":"sign","args":[{"name":"digest","external_name":"digest","restriction":""},{"name":"data","external_name":"data","restriction":""}],"visibility":"Public","body":"if private?\nelse\n  raise(PKeyError.new(\"Private key is needed\"))\nend\nslice = Slice(UInt8).new(max_encrypt_size)\ndigest.update(data)\ndigest_pointer = digest.to_unsafe\nif LibCrypto.evp_sign_final(digest, slice, out len, self)\nelse\n  raise(PKeyError.new(\"Unable to sign\"))\nend\nslice[0, len.to_i32]\n"}},{"html_id":"to_der(io)-instance-method","name":"to_der","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":91,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L91"},"def":{"name":"to_der","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"fn = ->(buf : ::Pointer(::Pointer(UInt8))) do\n  if private?\n    LibCrypto.i2d_private_key(self, buf)\n  else\n    LibCrypto.i2d_public_key(self, buf)\n  end\nend\nlen = fn.call(Pointer(Pointer(UInt8)).null)\nif len <= 0\n  raise(PKeyError.new(\"Could not output in DER format\"))\nend\nslice = Slice(UInt8).new(len)\np = slice.to_unsafe\nlen = fn.call(pointerof(p))\noutput = slice[0, len]\nio.write(output)\n"}},{"html_id":"to_der-instance-method","name":"to_der","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":85,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L85"},"def":{"name":"to_der","visibility":"Public","body":"io = IO::Memory.new\nto_der(io)\nBase64.encode(io.to_s)\n"}},{"html_id":"to_pem(io:IO,cipher:OpenSSL::Cipher?=nil,passphrase=nil)-instance-method","name":"to_pem","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"cipher","default_value":"nil","external_name":"cipher","restriction":"OpenSSL::Cipher | Nil"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""}],"args_string":"(io : IO, cipher : OpenSSL::Cipher? = nil, passphrase = nil)","args_html":"(io : IO, cipher : <a href=\"../OpenSSL/Cipher.html\">OpenSSL::Cipher</a>? = <span class=\"n\">nil</span>, passphrase = <span class=\"n\">nil</span>)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":56,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L56"},"def":{"name":"to_pem","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"cipher","default_value":"nil","external_name":"cipher","restriction":"OpenSSL::Cipher | Nil"},{"name":"passphrase","default_value":"nil","external_name":"passphrase","restriction":""}],"visibility":"Public","body":"bio = BIO.new(io)\nif private?\n  cipher_pointer = nil\n  if !cipher.nil?\n    unsafe = cipher.to_unsafe\n    cipher_pointer = pointerof(unsafe)\n  end\n  if (LibCrypto.pem_write_bio_pkcs8_private_key(bio, self, cipher_pointer, nil, 0, passphrase_callback, Box.box(passphrase))) == 1\n  else\n    raise(PKeyError.new(\"Could not write to PEM\"))\n  end\nelse\n  if (LibCrypto.pem_write_bio_public_key(bio, self)) == 1\n  else\n    raise(PKeyError.new(\"Could not write to PEM\"))\n  end\nend\n"}},{"html_id":"to_pem(cipher:OpenSSL::Cipher,passphrase)-instance-method","name":"to_pem","abstract":false,"args":[{"name":"cipher","external_name":"cipher","restriction":"OpenSSL::Cipher"},{"name":"passphrase","external_name":"passphrase","restriction":""}],"args_string":"(cipher : OpenSSL::Cipher, passphrase)","args_html":"(cipher : <a href=\"../OpenSSL/Cipher.html\">OpenSSL::Cipher</a>, passphrase)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":73,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L73"},"def":{"name":"to_pem","args":[{"name":"cipher","external_name":"cipher","restriction":"OpenSSL::Cipher"},{"name":"passphrase","external_name":"passphrase","restriction":""}],"visibility":"Public","body":"io = IO::Memory.new\nto_pem(io, cipher, passphrase)\nio.to_s\n"}},{"html_id":"to_pem-instance-method","name":"to_pem","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":79,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L79"},"def":{"name":"to_pem","visibility":"Public","body":"io = IO::Memory.new\nto_pem(io)\nio.to_s\n"}},{"html_id":"to_unsafe:Pointer(LibCrypto::EvpPKey)-instance-method","name":"to_unsafe","abstract":false,"location":{"filename":"src/openssl_ext/pkey.cr","line_number":40,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L40"},"def":{"name":"to_unsafe","visibility":"Public","body":"@pkey"}},{"html_id":"verify(digest,signature,data)-instance-method","name":"verify","abstract":false,"args":[{"name":"digest","external_name":"digest","restriction":""},{"name":"signature","external_name":"signature","restriction":""},{"name":"data","external_name":"data","restriction":""}],"args_string":"(digest, signature, data)","args_html":"(digest, signature, data)","location":{"filename":"src/openssl_ext/pkey.cr","line_number":151,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L151"},"def":{"name":"verify","args":[{"name":"digest","external_name":"digest","restriction":""},{"name":"signature","external_name":"signature","restriction":""},{"name":"data","external_name":"data","restriction":""}],"visibility":"Public","body":"signature = signature.to_slice\ndigest.update(data)\ncase LibCrypto.evp_verify_final(digest, signature, signature.size.to_u32, self)\nwhen 0\n  false\nwhen 1\n  true\nelse\n  raise(PKeyError.new(\"Unable to verify\"))\nend\n"}}],"types":[{"html_id":"openssl_ext/OpenSSL/PKey/PKeyError","path":"OpenSSL/PKey/PKeyError.html","kind":"class","full_name":"OpenSSL::PKey::PKeyError","name":"PKeyError","abstract":false,"superclass":{"html_id":"openssl_ext/OpenSSL/Error","kind":"class","full_name":"OpenSSL::Error","name":"Error"},"ancestors":[{"html_id":"openssl_ext/OpenSSL/Error","kind":"class","full_name":"OpenSSL::Error","name":"Error"},{"html_id":"openssl_ext/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/pkey.cr","line_number":6,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/pkey.cr#L6"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"openssl_ext/OpenSSL/RSA/RsaError","kind":"class","full_name":"OpenSSL::RSA::RsaError","name":"RsaError"}],"namespace":{"html_id":"openssl_ext/OpenSSL/PKey","kind":"class","full_name":"OpenSSL::PKey","name":"PKey"}}]},{"html_id":"openssl_ext/OpenSSL/RSA","path":"OpenSSL/RSA.html","kind":"class","full_name":"OpenSSL::RSA","name":"RSA","abstract":false,"superclass":{"html_id":"openssl_ext/OpenSSL/PKey","kind":"class","full_name":"OpenSSL::PKey","name":"PKey"},"ancestors":[{"html_id":"openssl_ext/OpenSSL/PKey","kind":"class","full_name":"OpenSSL::PKey","name":"PKey"},{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/rsa.cr","line_number":5,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L5"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"openssl_ext/OpenSSL","kind":"module","full_name":"OpenSSL","name":"OpenSSL"},"class_methods":[{"html_id":"generate(size:Int32,exponent:UInt32)-class-method","name":"generate","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Int32"},{"name":"exponent","external_name":"exponent","restriction":"UInt32"}],"args_string":"(size : Int32, exponent : UInt32)","args_html":"(size : Int32, exponent : UInt32)","location":{"filename":"src/openssl_ext/rsa.cr","line_number":10,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L10"},"def":{"name":"generate","args":[{"name":"size","external_name":"size","restriction":"Int32"},{"name":"exponent","external_name":"exponent","restriction":"UInt32"}],"visibility":"Public","body":"rsa_pointer = LibCrypto.rsa_new\nexponent_bn = LibCrypto.bignum_new\nLibCrypto.set_bignum_from_decimal(pointerof(exponent_bn), exponent.to_s)\nLibCrypto.rsa_generate_key_ex(rsa_pointer, size, exponent_bn, nil)\n(new(true)).tap do |pkey|\n  LibCrypto.evp_pkey_set1_rsa(pkey, rsa_pointer)\nend\n"}}],"instance_methods":[{"html_id":"blinding_off!-instance-method","name":"blinding_off!","abstract":false,"location":{"filename":"src/openssl_ext/rsa.cr","line_number":93,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L93"},"def":{"name":"blinding_off!","visibility":"Public","body":"LibCrypto.rsa_blinding_off(rsa)\n@blinding_on = false\n"}},{"html_id":"blinding_on!-instance-method","name":"blinding_on!","abstract":false,"location":{"filename":"src/openssl_ext/rsa.cr","line_number":89,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L89"},"def":{"name":"blinding_on!","visibility":"Public","body":"@blinding_on = ((LibCrypto.rsa_blinding_on(rsa, nil)) == 1)"}},{"html_id":"blinding_on?:Bool-instance-method","name":"blinding_on?","abstract":false,"location":{"filename":"src/openssl_ext/rsa.cr","line_number":85,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L85"},"def":{"name":"blinding_on?","visibility":"Public","body":"@blinding_on"}},{"html_id":"private_decrypt(data,padding=LibCrypto::Padding::PKCS1_PADDING)-instance-method","name":"private_decrypt","abstract":false,"args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"args_string":"(data, padding = LibCrypto::Padding::PKCS1_PADDING)","args_html":"(data, padding = <span class=\"t\">LibCrypto</span><span class=\"t\">::</span><span class=\"t\">Padding</span><span class=\"t\">::</span><span class=\"t\">PKCS1_PADDING</span>)","location":{"filename":"src/openssl_ext/rsa.cr","line_number":71,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L71"},"def":{"name":"private_decrypt","args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"visibility":"Public","body":"if private?\nelse\n  raise(RsaError.new(\"private key needed\"))\nend\nfrom = data.to_slice\nto = Slice(UInt8).new(max_encrypt_size)\nlen = LibCrypto.rsa_private_decrypt(from.size, from, to, rsa, padding)\nif len < 0\n  raise(RsaError.new(\"unable to decrypt\"))\nend\nto[0, len]\n"}},{"html_id":"private_encrypt(data,padding=LibCrypto::Padding::PKCS1_PADDING)-instance-method","name":"private_encrypt","abstract":false,"args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"args_string":"(data, padding = LibCrypto::Padding::PKCS1_PADDING)","args_html":"(data, padding = <span class=\"t\">LibCrypto</span><span class=\"t\">::</span><span class=\"t\">Padding</span><span class=\"t\">::</span><span class=\"t\">PKCS1_PADDING</span>)","location":{"filename":"src/openssl_ext/rsa.cr","line_number":58,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L58"},"def":{"name":"private_encrypt","args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"visibility":"Public","body":"if private?\nelse\n  raise(RsaError.new(\"private key needed\"))\nend\nfrom = data.to_slice\nto = Slice(UInt8).new(max_encrypt_size)\nlen = LibCrypto.rsa_private_encrypt(from.size, from, to, rsa, padding)\nif len < 0\n  raise(RsaError.new(\"unable to encrypt\"))\nend\nto[0, len]\n"}},{"html_id":"public_decrypt(data,padding=LibCrypto::Padding::PKCS1_PADDING)-instance-method","name":"public_decrypt","abstract":false,"args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"args_string":"(data, padding = LibCrypto::Padding::PKCS1_PADDING)","args_html":"(data, padding = <span class=\"t\">LibCrypto</span><span class=\"t\">::</span><span class=\"t\">Padding</span><span class=\"t\">::</span><span class=\"t\">PKCS1_PADDING</span>)","location":{"filename":"src/openssl_ext/rsa.cr","line_number":48,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L48"},"def":{"name":"public_decrypt","args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"visibility":"Public","body":"from = data.to_slice\nto = Slice(UInt8).new(max_encrypt_size)\nlen = LibCrypto.rsa_public_decrypt(from.size, from, to, rsa, padding)\nif len < 0\n  raise(RsaError.new(\"unable to decrypt\"))\nend\nto[0, len]\n"}},{"html_id":"public_encrypt(data,padding=LibCrypto::Padding::PKCS1_PADDING)-instance-method","name":"public_encrypt","abstract":false,"args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"args_string":"(data, padding = LibCrypto::Padding::PKCS1_PADDING)","args_html":"(data, padding = <span class=\"t\">LibCrypto</span><span class=\"t\">::</span><span class=\"t\">Padding</span><span class=\"t\">::</span><span class=\"t\">PKCS1_PADDING</span>)","location":{"filename":"src/openssl_ext/rsa.cr","line_number":35,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L35"},"def":{"name":"public_encrypt","args":[{"name":"data","external_name":"data","restriction":""},{"name":"padding","default_value":"LibCrypto::Padding::PKCS1_PADDING","external_name":"padding","restriction":""}],"visibility":"Public","body":"from = data.to_slice\nif max_encrypt_size < from.size\n  raise(RsaError.new(\"value is too big to be encrypted\"))\nend\nto = Slice(UInt8).new(max_encrypt_size)\nlen = LibCrypto.rsa_public_encrypt(from.size, from, to, rsa, padding)\nif len < 0\n  raise(RsaError.new(\"unable to encrypt\"))\nend\nto[0, len]\n"}},{"html_id":"public_key-instance-method","name":"public_key","abstract":false,"location":{"filename":"src/openssl_ext/rsa.cr","line_number":26,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L26"},"def":{"name":"public_key","visibility":"Public","body":"pub_rsa = LibCrypto.rsa_public_key_dup(rsa)\nif pub_rsa\nelse\n  raise(RsaError.new(\"Could not get public key from RSA\"))\nend\n(RSA.new(false)).tap do |pkey|\n  LibCrypto.evp_pkey_set1_rsa(pkey, pub_rsa)\nend\n"}}],"types":[{"html_id":"openssl_ext/OpenSSL/RSA/RsaError","path":"OpenSSL/RSA/RsaError.html","kind":"class","full_name":"OpenSSL::RSA::RsaError","name":"RsaError","abstract":false,"superclass":{"html_id":"openssl_ext/OpenSSL/PKey/PKeyError","kind":"class","full_name":"OpenSSL::PKey::PKeyError","name":"PKeyError"},"ancestors":[{"html_id":"openssl_ext/OpenSSL/PKey/PKeyError","kind":"class","full_name":"OpenSSL::PKey::PKeyError","name":"PKeyError"},{"html_id":"openssl_ext/OpenSSL/Error","kind":"class","full_name":"OpenSSL::Error","name":"Error"},{"html_id":"openssl_ext/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"openssl_ext/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"openssl_ext/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/openssl_ext/rsa.cr","line_number":6,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/rsa.cr#L6"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"openssl_ext/OpenSSL/RSA","kind":"class","full_name":"OpenSSL::RSA","name":"RSA"}}]}]},{"html_id":"openssl_ext/OpensslRsa","path":"OpensslRsa.html","kind":"module","full_name":"OpensslRsa","name":"OpensslRsa","abstract":false,"locations":[{"filename":"src/openssl_ext/version.cr","line_number":1,"url":"https://github.com/toddsundsted/openssl_ext/blob/3155f6b996f0be94ca1d5d1ced207d0fc9fab79e/src/openssl_ext/version.cr#L1"}],"repository_name":"openssl_ext","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}]}]}})